--Вывести к каждому самолету класс обслуживания и количество мест этого класса
SELECT seats.aircraft_code,
       seats.fare_conditions,
       COUNT(*) AS seats_count
FROM seats
GROUP BY seats.aircraft_code,
         seats.fare_conditions;

--Найти 3 самых вместительных самолета (модель + кол-во мест)
SELECT aircrafts_data.model,
       count(seats.aircraft_code) AS seats_number
FROM aircrafts_data
         LEFT JOIN seats ON aircrafts_data.aircraft_code = seats.aircraft_code
GROUP BY aircrafts_data.model
ORDER BY seats_number DESC
LIMIT 3;

--Вывести код,модель самолета и места не эконом класса для самолета 'Аэробус A321-200' с сортировкой по местам
SELECT aircrafts_data.aircraft_code,
       aircrafts_data.model,
       seats.seat_no
FROM aircrafts_data,
     seats
where aircrafts_data.aircraft_code = seats.aircraft_code
  AND aircrafts_data.model ->> 'ru' = 'Аэробус A321-200'
  AND seats.fare_conditions != 'Economy'
ORDER BY seats.seat_no;

--Вывести города в которых больше 1 аэропорта ( код аэропорта, аэропорт, город)
SELECT airports_data.airport_code,
       airports_data.airport_name,
       airports_data.city
FROM airports_data,
     (SELECT airports_data.city AS city,
             COUNT(*)
      FROM airports_data
      GROUP BY airports_data.city
      HAVING COUNT(*) > 1) AS tbl
WHERE airports_data.city = tbl.city;

-- Найти ближайший вылетающий рейс из Екатеринбурга в Москву, на который еще не завершилась регистрация
SELECT *
FROM flights
WHERE flights.departure_airport = (
    -- or just = 'SVX'
    SELECT airports_data.airport_code
    FROM airports_data
    WHERE airports_data.city ->> 'ru' = 'Екатеринбург')
  AND flights.ARRIVAL_AIRPORT IN (
    -- or just in ('SVO', 'VKO', 'DME')
    SELECT airports_data.airport_code
    FROM airports_data
    WHERE airports_data.city ->> 'ru' = 'Москва')
  AND flights.status IN ('On Time', 'Delayed')
ORDER BY flights.scheduled_departure
LIMIT 1;

--Вывести самый дешевый и дорогой билет и стоимость ( в одном результирующем ответе)
(SELECT *
 FROM ticket_flights
 ORDER BY amount ASC
 LIMIT 1)
UNION ALL
(SELECT *
 FROM ticket_flights
 ORDER BY amount DESC
 LIMIT 1);


-- Написать DDL таблицы Customers , должны быть поля id , firstName, LAStName, email , phone. Добавить ограничения на поля ( constraints) .
CREATE TABLE IF NOT EXISTS Customers
(
    id         BIGINT PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
    first_name varchar(255) NOT NULL,
    last_name  varchar(255) NOT NULL,
    email      varchar(100) NOT NULL UNIQUE,
    phone      varchar(15) NOT NULL UNIQUE
);

-- Написать DDL таблицы Orders , должен быть id, customerId,	quantity. Должен быть внешний ключ на таблицу customers + ограничения
CREATE TABLE IF NOT EXISTS Orders
(
    id          BIGINT PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
    customer_id INT REFERENCES Customers (id),
    quantity    INT NOT NULL CHECK (quantity > 0)
);

-- Написать 5 insert в эти таблицы
INSERT INTO customers(first_name, last_name, email, phone)
VALUES ('Kiryl',
        'Pryhozhy',
        'k.prihozhy@gmail.com',
        '+375445436136');

INSERT INTO customers(first_name, last_name, email, phone)
VALUES ('Egor',
        'Egorov',
        'egor@gmail.com',
        '+375441237788');

INSERT INTO customers(first_name, last_name, email, phone)
VALUES ('Sasha',
        'Samoilov',
        'sanyok1999@gmail.com',
        '+375447777777');

INSERT INTO customers(first_name, last_name, email, phone)
VALUES ('Nastya',
        'Mironova',
        'nAStik7712@gmail.com',
        '+3753389178123');

INSERT INTO customers(first_name, last_name, email, phone)
VALUES ('Some',
        'Customer',
        'customer@mail.ru',
        '+7801923910');

INSERT INTO orders(customer_id, quantity)
VALUES (1, 55);

INSERT INTO orders(customer_id, quantity)
VALUES (1, 12);

INSERT INTO orders(customer_id, quantity)
VALUES (3, 123);

INSERT INTO orders(customer_id, quantity)
VALUES (4, 8888);

INSERT INTO orders(customer_id, quantity)
VALUES (2, 55819);

-- удалить таблицы
DROP TABLE IF EXISTS Orders;
DROP TABLE IF EXISTS Customers;

--Вывести данные всех Кириллов, которые планируют посетить Москву,
--класс самолета, в котором они будут лететь и аэропорт прибытия

select ticket_flights.fare_conditions,
       flights.arrival_airport,
       kirills.passenger_name,
       kirills.contact_data
from ticket_flights
         JOIN (SELECT passenger_name, contact_data, ticket_no
               FROM tickets
               WHERE passenger_name LIKE '%KIRILL%') AS kirills
              ON ticket_flights.ticket_no = kirills.ticket_no
         JOIN flights ON ticket_flights.flight_id = flights.flight_id
WHERE arrival_airport IN ('SVO', 'VKO', 'DME')
  AND flights.scheduled_departure > bookings.now();